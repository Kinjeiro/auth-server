openapi: 3.0.0
# https://swagger.io/docs/specification/basic-structure/

info:
  version: 1.1.0
  title: NodeJs Auth server
  description:
    **!!!WARNING!!!** **При авторизации** через swagger-ui используйте только "Query parameters". "Request body" - в swagger-ui не работает, там [у них открытая бага (не кладутся client_id в боди)](https://github.com/swagger-api/swagger-ui/pull/4213)

  license:
    name: Reagentum Front Core

components:
  securitySchemes:
    oAuth2Password:
      type: oauth2
      description: Авторизация по токену по протоколу OAuth 2.0 + проверки подлиности client (приложения)
      flows:
        password:
          tokenUrl: /api/auth/signin
          refreshUrl: /api/auth/signin
          scopes:
            auth: All auth scopes

  schemas:
    UserPublic:
      description: Публичная информация о пользователе
      type: object
      properties:
        userId:
          type: string
        displayName:
          type: string
        aliasId:
          type: string
        description:
          type: string
        computedDisplayName:
          type: string
          description: Калькулируемое поле: displayName || aliasId || userId
    User:
      description: Пользователь
      type: object
      properties:
        userId:
          type: string
        displayName:
          type: string
        aliasId:
          type: string
        description:
          type: string
        computedDisplayName:
          type: string
          description: Калькулируемое поле: displayName || aliasId || userId
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: string
        password:
          type: string
          description: Заполняется только при регистрации
        username:
          type: string
        userType:
          type: string
        provider:
          type: string
        providerScopes:
          type: array
        providerData:
          type: object
        created:
          type: string
        updated:
          type: string
        comment:
          type: string
        roles:
          type: array
        permissions:
          type: array
        contextData:
          type: object
          description: Небольшое хранилище разнообразных данных для пользователей на проектах
      required:
         - email

    EmailOptions:
      description: Схема для настроек письма (https://nodemailer.com/message/)
      type: object
      properties:
        subject:
          type: string
        text:
          type: string
        html:
          type: string
#          // todo @ANKU @LOW - сделать чтобы по урлу загружали файл (cors)
          description: Поддерживается handlesbar (.hbs) темплейтинг (http://handlebarsjs.com/)

  parameters:
    accessToken:
      in: header
      name: authorization
      schema:
        type: string
        required: true
      description: \"Bearer <OAuth 2.0 token>\" - access_token

    project_id:
      in: header
      name: project_id
      schema:
        type: string
        required: false
      description: >
        Индификатор проекта, чтобы выделить юзеров для разных проектов (один авторизационный сервер на несколько проектов)
        Если не задан автоматически возьмется из client_id или из scope (первым элементом во время /signin)

paths:
# ===========================
# ======== HEALTH ===========
# ===========================
  /api/health:
    get:
      summary: Тест доступности сервера без авторизации
      responses:
        '200':
          description: Имя и версия сервера
          content:
            'text/html':
              schema:
                type: string
                example: @reagentum/auth-server@1.0.1


# ===========================
# ======= SIGN UP ===========
# ===========================
  /api/auth/signup:
    post:
      summary: Регистрация нового пользователя
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userData:
                  $ref: '#/components/schemas/User'
                  description: пользовательские данные
                emailOptions:
                  $ref: '#/components/schemas/EmailOptions'
                  description: настройки письма об успешности регистрации (контекст User)
                client_id:
                  type: string
                  description: для проверки подлинности клиента
                client_secret:
                  type: string
                  description: для проверки подлинности клиента
              required:
                - userData
                - client_id
                - client_secret

      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


# ===========================
# ======= SIGN IN ===========
# ===========================
  /api/auth/signin:
    post:
      summary: Авторизация - получение токенов доступа
      description: >
        Дальше их используют для получение информации о пользователе (/user)
        Стек проверки:

          1. Стратегия 'oauth2-client-password' определения подлинности клиента (приложения) по client_id и client_secret

          2. [signin] - генерация токенов доступа
          ```
          Request:
          {
            grant_type: 'password',
            client_id: 'myApplication',
            client_secret: 'myApplicationSecretWord',
          }
          ```
          Credentials пользователя можно получить двумя способами:

          2.1. Стетегия grant_type: 'password' - из значение в теле username: 'testUserName' \ password: 'testUserNamePassword',
          ```
          Request:
          {
            grant_type: 'password',
            client_id: 'myApplication',
            client_secret: 'myApplicationSecretWord',
            username: 'testUserName',
            password: 'testUserNamePassword',
          }
          ```
          или

          2.2. Стратегия 'basic' (если headers.authorization: `Basic <base64-encoded credentials>`) - по кренедшелам из заголовка

          3. [refresh] Стетегия grant_type: 'refresh_token' - обновления access_token по refresh_token
          ```
          Request:
          {
            grant_type: 'refresh_token',
            client_id: 'myApplication',
            client_secret: 'myApplicationSecretWord',
            refresh_token: 'user_refresh_token',
          }
          ```
      tags:
        - auth
#      security:
#        - oAuth2Password: [auth]

      parameters:
        - in: header
          name: authorization
          schema:
            type: string
            required: false
          description: если крендешиался поступают через basic: `Basic <base64-encoded credentials>`
        - $ref: '#/components/parameters/project_id'

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                client_id:
                  type: string
                  description: для проверки подлинности клиента
                client_secret:
                  type: string
                  description: для проверки подлинности клиента
                username:
                  type: string
                  description: для получения токенов доступа
                password:
                  type: string
                  description: для получения токенов доступа
                refresh_token:
                  type: string
                  description: для обновления access_token
              required:
                - grant_type
                - client_id
                - client_secret
              example:
                grant_type: 'password'
                client_id: 'myApplication'
                client_secret: 'myApplicationSecretWord'
                username: 'testUserName'
                password: 'testUserNamePassword'
# // todo @ANKU @LOW - не работает scheme.examples
#              examples:
#                token:
#                  value:
#                    grant_type: 'password3'
#                    client_id: 'myApplication'
#                    client_secret: 'myApplicationSecretWord'
#                    username: 'testUserName'
#                    password: 'testUserNamePassword'
#                    refresh_token: 'refresh_token'
#                refresh:
#                  summary: проделение токена, если assecc истек (обычно через 5 минут)
#                  value:
#                    grant_type: 'refresh_token'
#                    client_id: 'myApplication'
#                    client_secret: 'myApplicationSecretWord'
#                    refresh_token: 'user_refresh_token'
      responses:
        '200':
          description: Токены доступа и обновления
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
                  expires_in:
                    type: number
                    description: duration in seconds
                  expires_in_date:
                    type: string
                    description: date iso when expired
                  token_type:
                    type: string
                    description: "Bearer"
                example:
                  access_token: "395549ac90cd6f37cbc28c6cb5b31aa8ffe2a22826831dba11d6baae9dafb07a"
                  refresh_token: "857896e0aab5b35456f6432ef2f812a344e2a3bab12d38b152ee3dd968442613"
                  expires_in: 299 #, (seconds)
                  token_type: "Bearer"

# ===========================
# ========= USER ============
# ===========================
  /api/auth/user:
    get:
      summary: Проверка по access_token информации о валидности прав доступа пользователя.
      description: >
        Если все актуально возвращается информация о пользователе (кроме profileImageURI - его получать через отдельный запрос картинки чтобы кешировать)


        Благодаря STRATEGY__BEARER_TOKEN - Стартегия 'bearer' (если headers.authorization: `Bearer <OAuth 2.0 token>`) - по токену возвращает пользователя
         (подключенаются в методе createRoute (если auth!==false) - handlers.push(middlewareBearerStrategy))
         ищется в базе токен и по нему ищется пользователь
      tags:
        - auth
      security:
        - oAuth2Password: [auth]

      parameters:
        - $ref: '#/components/parameters/accessToken'

      responses:
        '200':
          description: Если токен валидный, возвращает пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'


# ===========================
# ======= SIGN OUT ==========
# ===========================
  /api/auth/signout:
    get:
      summary: выход, удаление всех токенов доступа
      tags:
        - auth
      security:
        - oAuth2Password: [auth]

      parameters:
        - $ref: '#/components/parameters/accessToken'

      responses:
        '200':
          description: Пользователь разлогинен


# ===========================
# ======= FORGOT  ===========
# ===========================
  /api/auth/forgot:
    post:
      summary: Забыли пароль? Отправку на почту токена для смены пароля
      description: >
        После того как у себя сделаете страницы смены пароля, нужно отослалть его вместе с этим токеном
        обратно на авторизационный сервер /api/auth/reset
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/project_id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email существующего пользователя на которой отошлется письмо с урлом и токеном замены пароля
                emailOptions:
                  $ref: '#/components/schemas/EmailOptions'
                  description: >
                    https://nodemailer.com/message/

                    Про поле html:
                    Handlersbar шаблон
                    В контекстных данных передается пользователь (User)

                    В поле "html" нужно поместить шаблон hbs: обязательно добавить ```{{{URL}}}```, куда вставится ссылка с токеном для сброса пароля ```?token=<reset password token>```
                    ```
                    <pre>
                      <div>
                        <h3>Дорогой, {{displayName}}</h3>
                        <a href="{{{URL}}}">
                          Сменить пароль
                        </a>
                      </div>
                    </pre>
                    ```
                    Превратится в
                    ```
                    <pre>
                      <div>
                        <h3>Дорогой, Иван Иванович</h3>
                        <a href="http://myapp.com/reset?token=857896e0aab5b35456f6432ef2f812a344e2a3bab12d38b152ee3dd968442613">
                          Сменить пароль
                        </a>
                      </div>
                    </pre>
                    ```
                resetPasswordPageUrl:
                  type: string,
                  description: >
                    Урл по которому пользователь кликнет в письме, чтобы сменить пароль
                    Система к этому урлу добавит query параметр token (reset password token)
                    http://myapp.com/reset?token=857896e0aab5b35456f6432ef2f812a344e2a3bab12d38b152ee3dd968442613
                client_id:
                  type: string
                  description: для проверки подлинности клиента
                client_secret:
                  type: string
                  description: для проверки подлинности клиента
              required:
                - email
                - resetPasswordPageUrl
                - client_id
                - client_secret
              example:
                email: 'test@user.com'
                emailOptions:
                  subject: 'Сброс пароля'
                  html: '<div><a href="{{URL}}">Сменить пароль</a></div>'
                  priority: 'high'
                resetPasswordPageUrl: 'http://myapp.com/reset'
                client_id: 'webServer1'
                client_secret: 'webServer1SecretWord'

      responses:
        '200':
          description: Письмо успешно отослано

# ===========================
# ======== RESET ============
# ===========================
  /api/auth/reset:
    post:
      summary: Установка нового пароля для пользователя
      description: >
        Сначала необходимо отправить на почту письмо с токеном сброса пароля с помощью апи ```/api/auth/forgot```
        Потом на своей форме ввода ного пароля вызвать этот апи и отослать новый пароль и токен из query параметра ```token```
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resetPasswordToken:
                  type: string
                  description: Токен пришедший в query параметре token из письма
                newPassword:
                  type: string
                  description: Новый пароль

                emailSubject:
                  type: string
                  description: Тема письма
                emailHtml:
                  type: string
                  description: Тело письма, что пароль успешно обновлен
                emailOptions:
                  type: object
                  description: https://nodemailer.com/message/

                client_id:
                  type: string
                  description: для проверки подлинности клиента
                client_secret:
                  type: string
                  description: для проверки подлинности клиента
              required:
                - resetPasswordToken
                - newPassword
                - client_id
                - client_secret
      responses:
        '200':
          description: Пароль обновлен. Письмо об успешности смены пароля отослано. Возвращается username, чтобы можно было залогинится снова
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string


# ===========================
# ====== user/avatar ========
# ===========================
  /api/users/avatar/{userIdOrAliasId}:
    get:
      summary: Получения аватара пользователя
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/project_id'
        - in: path
          name: userIdOrAliasId
          required: true
          schema:
            type: string
          description: userIdOrAliasId

      responses:
        '200':
          description: картинка
        '404':
          description: если нету аватарки


# ===========================
# ====== user/public ========
# ===========================
  /api/users/public/{userIdOrAliasId}:
    get:
      summary: Получения публичных полей пользователя
      description: Получения публичных полей пользователя любому зарегистрированным пользователем
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/project_id'
        - in: path
          name: userIdOrAliasId
          required: true
          schema:
            type: string
          description: userIdOrAliasId
      responses:
        '200':
          description: Публичная информация пользователя, доступная без авторизации для всех
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublic'

# ===========================
# ====== user/protected ========
# ===========================
  /api/users/protected/{userIdOrAliasId}:
    get:
      summary: Получения защищенных полей пользователя
      description: Получения публичных полей пользователя специальными ролями ('admin' или 'protector')
      tags:
        - users
      security:
        - oAuth2Password: [auth]

      parameters:
        - in: path
          name: userIdOrAliasId
          required: true
          schema:
            type: string
          description: userIdOrAliasId

      responses:
        '200':
          description: Обычно это 'username', 'displayName', 'profileImageURI', 'firstName', 'lastName', 'middleName', 'email', 'phone',
          content:
            application/json:
              schema:
                type: object

# =======================================
# ====== check user unique field ========
# =======================================
  /api/users/unique:
    get:
      summary: Проверка уникальности значения для поля
      description: Проверка уникальности значения для поля
      tags:
        - users
      parameters:
        - $ref: '#/components/parameters/project_id'
        - in: query
          name: field
          schema:
            type: string
          description: Название поля
        - in: query
          name: value
          schema:
            type: string
          description: Значение поля, которое нужно проверить на уникальность

      responses:
        '200':
          description: Проверка успешна
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
        '422':
          description: Значение не уникально

# ===========================
# ====== user PUT ========
# ===========================
  /api/users:
    put:
      summary: Обновление данных пользователем
      description: Обновление данных пользователем
      tags:
        - users
      security:
        - oAuth2Password: [auth]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                aliasId:
                  type: string
                email:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                middleName:
                  type: string
                displayName:
                  type: string
                phone:
                  type: string
                address:
                  type: string
                description:
                  type: string
                comment:
                  type: string
                profileImageURI:
                  type: string
                contextData:
                  type: object
      responses:
        '200':
          description: Измененные объект пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

# ===========================
# ====== user changePassword ========
# ===========================
  /api/users/changePassword:
    put:
      summary: Смена пароля
      description: Смена пароля
      tags:
        - users
      security:
        - oAuth2Password: [auth]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                oldPassword:
                  type: string
      responses:
        '200':
          description: Все прошло успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean

# ===========================
# ====== user delete ========
# ===========================
    delete:
      summary: удаление собственного пользователя
      description: удаление собственного пользователя
      tags:
        - users
      security:
        - oAuth2Password: [auth]
      responses:
        '200':
          description: Все прошло успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean

# ===========================
# ====== user PUT by admin ========
# ===========================
  /api/users/{userId}:
    put:
      summary: Обновление данных пользователя админом
      description: Обновление данных пользователя админом
      tags:
        - users
      security:
        - oAuth2Password: [auth]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: userId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                middleName:
                  type: string
                displayName:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                profileImageURI:
                  type: string
                contextData:
                  type: object
      responses:
        '200':
          description: Все прошло успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

# ===========================
# ====== user delete by admin ========
# ===========================
    delete:
      summary: удаление пользователя админом
      description: удаление пользователя админом
      tags:
        - users
      security:
        - oAuth2Password: [auth]
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: userId
      responses:
        '200':
          description: Все прошло успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean


# ===========================
# ====== delete all by admin ========
# ===========================
  /api/users/all:
    delete:
      summary: удаление всех пользователей админом
      tags:
        - users
      security:
        - oAuth2Password: [auth]
      responses:
        '200':
          description: Все прошло успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: boolean
